package com.example.cm.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.cassandra.repository.CassandraRepository;
import org.springframework.data.cassandra.repository.Query;
import org.springframework.stereotype.Repository;

import com.example.cm.model.Device;

@Repository
public interface DeviceRepository extends CassandraRepository<Device, UUID> {
    
    /**
     * Find a device by its network element ID
     * 
     * @param neId The network element ID to search for
     * @return Optional containing the device if found
     */
    Optional<Device> findByNeId(UUID neId);
    
    /**
     * Check if a device with the given network element ID exists
     * 
     * @param neId The network element ID to check
     * @return true if the device exists, false otherwise
     */
    boolean existsByNeId(UUID neId);
}





package com.example.cm.service;

import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.cm.dto.DeviceDTO;
import com.example.cm.model.Device;
import com.example.cm.repository.DeviceRepository;

@Service
public class DeviceService {

    @Autowired
    private DeviceRepository deviceRepository;
    
    @Autowired
    private RestTemplate restTemplate;
    
    private final String SBI_SERVICE_URL = "http://sbi-microservice/api/process";
    
    /**
     * Check if a device with the given network element ID exists
     * 
     * @param neId The network element ID to check
     * @return true if the device exists, false otherwise
     */
    public boolean deviceExists(UUID neId) {
        return deviceRepository.existsByNeId(neId);
    }
    
    /**
     * Get device information by network element ID
     * 
     * @param neId The network element ID to search for
     * @return Optional containing the device if found
     */
    public Optional<Device> getDeviceByNeId(UUID neId) {
        return deviceRepository.findByNeId(neId);
    }
    
    /**
     * Process the device information and send it to the SBI team's microservice
     * 
     * @param neId The network element ID to process
     * @return The response from the SBI team's microservice or an error message
     */
    public String processDeviceInfo(UUID neId) {
        Optional<Device> deviceOpt = getDeviceByNeId(neId);
        
        if (deviceOpt.isPresent()) {
            Device device = deviceOpt.get();
            DeviceDTO deviceDTO = new DeviceDTO(
                device.getUserName(),
                device.getPassword(),
                device.getIpAddr(),
                device.getNeId()
            );
            
            HttpHeaders headers = new HttpHeaders();
            headers.set("Content-Type", "application/json");
            
            HttpEntity<DeviceDTO> requestEntity = new HttpEntity<>(deviceDTO, headers);
            
            try {
                ResponseEntity<String> response = restTemplate.exchange(
                    SBI_SERVICE_URL,
                    HttpMethod.POST,
                    requestEntity,
                    String.class
                );
                
                return response.getBody();
            } catch (Exception e) {
                return "Error communicating with SBI service: " + e.getMessage();
            }
        }
        
        return "Device with neId " + neId + " not found";
    }
}



package com.example.cm.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.cm.service.DeviceService;

@RestController
@RequestMapping("/api/devices")
public class DeviceController {

    @Autowired
    private DeviceService deviceService;
    
    /**
     * Process device information based on the neId provided in the request body
     * This endpoint will be called by the SBI team's microservice
     * 
     * @param requestBody Map containing the neId as a string
     * @return ResponseEntity with the processing result or error message
     */
    @PostMapping("/process")
    public ResponseEntity<?> processDevice(@RequestBody Map<String, String> requestBody) {
        try {
            String neIdString = requestBody.get("neId");
            
            if (neIdString == null || neIdString.isEmpty()) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("error", "neId is required in the request body");
                return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
            }
            
            UUID neId;
            try {
                neId = UUID.fromString(neIdString);
            } catch (IllegalArgumentException e) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("error", "Invalid UUID format for neId");
                return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
            }
            
            if (!deviceService.deviceExists(neId)) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("error", "Device with neId " + neId + " not found");
                return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
            }
            
            String result = deviceService.processDeviceInfo(neId);
            
            Map<String, String> response = new HashMap<>();
            response.put("result", result);
            
            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Error processing request: " + e.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}










