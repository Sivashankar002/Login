package com.example.model;

import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.Table;

import java.util.Map;

@Table
public class Equipment {

    @PrimaryKey
    private String equipId;
    private String equipName;
    private String equipType;
    private Map<String, String> equipAttributes;

    // Getters and Setters
}


package com.example.model;

import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.Table;

@Table
public class Port {

    @PrimaryKey
    private String portName;
    private String portType;
    private String parent;

    // Getters and Setters
}




package com.example.service;

import com.example.model.Equipment;
import com.example.model.Port;
import com.example.repository.EquipmentRepository;
import com.example.repository.PortRepository;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;

@Service
public class ConfigService {

    @Autowired
    private EquipmentRepository equipmentRepository;

    @Autowired
    private PortRepository portRepository;

    public void parseAndSaveXml(String xml) throws IOException {
        XmlMapper xmlMapper = new XmlMapper();
        XmlComponentsWrapper wrapper = xmlMapper.readValue(xml, XmlComponentsWrapper.class);

        for (XmlComponent component : wrapper.components.componentList) {
            String type = component.state != null ? component.state.type : null;
            if (type != null && type.contains("PORT")) {
                // Save to Port table
                Port port = new Port();
                port.setPortName(component.name);
                port.setPortType("PORT");
                port.setParent(component.state.parent);
                portRepository.save(port);
            } else {
                // Save to Equipment table
                Equipment equipment = new Equipment();
                equipment.setEquipId(component.state != null ? component.state.id : null);
                equipment.setEquipName(component.name);
                equipment.setEquipType(type);
                
                Map<String, String> attributes = new HashMap<>();
                if (component.state != null) {
                    attributes.put("location", component.state.location);
                    attributes.put("mfg-name", component.state.mfgName);
                    attributes.put("mfg-date", component.state.mfgDate);
                    attributes.put("serial-no", component.state.serialNo);
                    attributes.put("part-no", component.state.partNo);
                    attributes.put("clei-code", component.state.cleiCode);
                }
                equipment.setEquipAttributes(attributes);
                equipmentRepository.save(equipment);
            }
        }
    }
}




package com.example.controller;

import com.example.service.ConfigService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/config")
public class ConfigController {

    @Autowired
    private ConfigService configService;

    @PostMapping("/receive-xml")
    public String receiveXml(@RequestBody String xml) {
        try {
            configService.parseAndSaveXml(xml);
            return "XML processed and saved successfully.";
        } catch (Exception e) {
            e.printStackTrace();
            return "Error processing XML: " + e.getMessage();
        }
    }
}




package com.example.service;

import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.util.List;

@JsonIgnoreProperties(ignoreUnknown = true)
public class XmlComponentsWrapper {
    public XmlComponentList components;
}

class XmlComponentList {
    @JacksonXmlElementWrapper(useWrapping = false)
    public List<XmlComponent> componentList;
}



package com.example.service;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class XmlComponent {
    public String name;
    public XmlState state;
}

@JsonIgnoreProperties(ignoreUnknown = true)
class XmlState {
    public String type;
    public String id;
    public String location;
    public String mfgName;
    public String mfgDate;
    public String serialNo;
    public String partNo;
    public String cleiCode;
    public String parent;
}




